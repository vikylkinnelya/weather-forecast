{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://weather/./src/js/services/getCities.js","webpack://weather/./src/js/services/getForecast.js","webpack://weather/./src/js/modules/createList.js","webpack://weather/./src/js/modules/removeList.js","webpack://weather/./src/js/modules/createMinMax.js","webpack://weather/./src/js/modules/setTempByHours.js","webpack://weather/./src/js/modules/setForecastDay.js","webpack://weather/./src/js/modules/setForecastDayDate.js","webpack://weather/./src/js/modules/setMinMaxTemp.js","webpack://weather/./src/js/main.js"],"sourcesContent":["const getCities = () => {\r\n    fetch('cities.json', {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        }\r\n    })\r\n        .then(response => response.json())\r\n        .then(jsonResponse => {\r\n            const datalist = document.querySelector('#data-list-cities')\r\n            jsonResponse.forEach(el => {\r\n                const option = document.createElement('option')\r\n                option.value = el.name\r\n                datalist.appendChild(option)\r\n            })\r\n        })\r\n}\r\n\r\nexport default getCities","const API_key = '03d6788b090850555c7924df3b5462b4'\r\n\r\nconst getForecast = async (city_name) => {\r\n    const API_base = `https://api.openweathermap.org/data/2.5/forecast?q=${city_name}&appid=${API_key}`\r\n    const res = await fetch(`${API_base}`) //передаем адрес ресурса, кот хотим получить \r\n    if (!res.ok) {\r\n        throw new Error(`Could not find forecast for ${city_name}` + `, reseived ${res.status}`)\r\n    }\r\n    const resp = await res.json()\r\n\r\n    const cityName = document.querySelector('.city-name')\r\n    cityName.innerHTML = ` at ${resp.city.name}&nbsp`\r\n\r\n    return resp\r\n}\r\n\r\nexport default getForecast","const createList = () => {\r\n    const forecastList = document.querySelector('.forecast-list')\r\n\r\n    const list = document.createElement('div')\r\n\r\n    list.classList.add('list-wrapper')\r\n    forecastList.appendChild(list)\r\n\r\n    for (let i = 1; i <= 6; i++) {\r\n        let day = document.createElement('div')\r\n        day.classList.add(`forecast-${i}`, 'forecast-day')\r\n        list.appendChild(day)\r\n    }\r\n}\r\n\r\nexport default createList","const removeList = () => {\r\n    const list = document.querySelector('.list-wrapper')\r\n    list != null && list.parentNode.removeChild(list)\r\n}\r\n\r\nexport default removeList","const createMinMax = (type, dayNum) => {\r\n\r\n    const el = document.createElement('div')\r\n    const c = document.createElement('span')\r\n    el.classList.add(`${type}-temp-${dayNum}`)\r\n\r\n    const minMaxWrapper = document.querySelector(`.min-max-wrapper-${dayNum}`)\r\n    c.innerText = '°C'\r\n    const space = document.createElement('span')\r\n    space.innerText = ('...')\r\n    minMaxWrapper.appendChild(el)\r\n    minMaxWrapper.appendChild(c)\r\n    type === 'min' && minMaxWrapper.appendChild(space)\r\n\r\n    return document.querySelector(`.${type}-temp-${dayNum}`)\r\n}\r\n\r\nexport default createMinMax","import setForecastDayDate from './setForecastDayDate'\r\nimport setMinMaxTemp from './setMinMaxTemp'\r\nimport setForecastDay from './setForecastDay'\r\n\r\nconst setTempByHours = (el) => {\r\n\r\n    const { dt, main } = el\r\n\r\n    let dayNum = setForecastDay(dt)\r\n\r\n    let h = new Date(dt * 1000).getHours()\r\n    h < 10 ? h = '0' + h : h\r\n\r\n    const hoursTempInfo = document.createElement('div')\r\n    const dayTime = document.createElement('div')\r\n    const timeTemp = document.createElement('div')\r\n\r\n    const temp = Math.floor(main['temp'] - 273, 15)\r\n\r\n    setForecastDayDate(dt, dayNum)\r\n    setMinMaxTemp(temp, dayNum)\r\n\r\n    const forecastDay = document.querySelector(`.forecast-${dayNum}`)\r\n    hoursTempInfo.classList.add('hours-temp-info', `hti-d${dayNum}-h${h}`)\r\n    forecastDay.appendChild(hoursTempInfo)\r\n\r\n    dayTime.classList.add('day-time')\r\n    dayTime.innerText = h + \":00\"\r\n    hoursTempInfo.appendChild(dayTime)\r\n\r\n    timeTemp.classList.add('time-temp')\r\n    timeTemp.innerText = temp + \"°C\"\r\n    hoursTempInfo.appendChild(timeTemp)\r\n}\r\n\r\nexport default setTempByHours","const setForecastDay = (dt) => {\r\n\r\n    const day = new Date(dt * 1000).getDate()\r\n    const today = new Date().getDate()\r\n\r\n    if (day == today) {\r\n        return 1\r\n    }\r\n    else if (day == today + 1) {\r\n        return 2\r\n    }\r\n    else if (day == today + 2) {\r\n        return 3\r\n    }\r\n    else if (day == today + 3) {\r\n        return 4\r\n    }\r\n    else if (day == today + 4) {\r\n        return 5\r\n    }\r\n    else {\r\n        return 6\r\n    }\r\n}\r\n\r\nexport default setForecastDay","const setForecastDayDate = (dt, dayNum) => {\r\n    const forecastDay = document.querySelector(`.forecast-${dayNum}`)\r\n\r\n    const date = new Date(dt * 1000)\r\n    const dY = date.getFullYear()\r\n    const dM = date.getMonth() + 1\r\n    const dD = date.getDate()\r\n    const fullDate = [dD, dM, dY].join('.')\r\n\r\n    const forecasDayDate = document.createElement('div')\r\n    forecasDayDate.classList.add(`forecast-day-date-${dayNum}`, 'forecast-day-date')\r\n    forecasDayDate.innerHTML = `<h3>${fullDate}</h3>`\r\n\r\n    document.querySelector(`.forecast-day-date-${dayNum}`) || forecastDay.appendChild(forecasDayDate)\r\n}\r\n\r\nexport default setForecastDayDate","import createMinMax from \"./createMinMax\"\r\n\r\nconst setMinMaxTemp = (temp, dayNum) => {\r\n\r\n    const forecastDay = document.querySelector(`.forecast-${dayNum}`)\r\n    const minMaxWrapper = document.createElement('div')\r\n    minMaxWrapper.classList.add(`min-max-wrapper-${dayNum}`, 'min-max-wrapper')\r\n    document.querySelector(`.min-max-wrapper-${dayNum}`) || forecastDay.appendChild(minMaxWrapper)\r\n\r\n    const min = document.querySelector(`.min-temp-${dayNum}`) || createMinMax('min', dayNum)\r\n    const max = document.querySelector(`.max-temp-${dayNum}`) || createMinMax('max', dayNum)\r\n\r\n    min.innerText = Math.min(min.innerText, temp)\r\n    max.innerText = Math.max(max.innerText, temp)\r\n}\r\n\r\nexport default setMinMaxTemp","'use strict';\r\nimport getCities from './services/getCities'\r\nimport getForecast from './services/getForecast';\r\nimport createList from './modules/createList';\r\nimport removeList from './modules/removeList';\r\nimport setTempByHours from './modules/setTempByHours';\r\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n\r\n    const form = document.getElementById('form')\r\n    const input = document.getElementById('city-input')\r\n\r\n    form.addEventListener('change', e => {\r\n        e.preventDefault();\r\n        removeList()\r\n        createList()\r\n\r\n        const inputCity = input.value;\r\n\r\n        getForecast(inputCity)\r\n            .then(res => res.list.forEach((el, idx) =>\r\n                setTempByHours(el, idx)\r\n            )\r\n            )\r\n            .catch(err => console.log(err))\r\n    })\r\n\r\n    form.addEventListener(\"submit\", e => {\r\n        e.preventDefault();\r\n        removeList()\r\n        createList()\r\n\r\n        const inputCity = input.value;\r\n\r\n        getForecast(inputCity)\r\n            .then(res => res.list.forEach((el, idx) =>\r\n                setTempByHours(el, idx)\r\n            )\r\n            )\r\n            .catch(err => console.log(err))\r\n    });\r\n\r\n})\r\n\r\nwindow.onload = getCities()"],"names":["async","city_name","API_base","res","fetch","ok","Error","status","resp","json","document","querySelector","innerHTML","city","name","forecastList","list","createElement","classList","add","appendChild","i","day","parentNode","removeChild","type","dayNum","el","c","minMaxWrapper","innerText","space","dt","main","Date","getDate","today","h","getHours","hoursTempInfo","dayTime","timeTemp","temp","Math","floor","forecastDay","date","dY","getFullYear","dM","getMonth","fullDate","join","forecasDayDate","min","max","window","addEventListener","form","getElementById","input","e","preventDefault","inputCity","value","then","forEach","idx","catch","err","console","log","onload","headers","response","jsonResponse","datalist","option"],"sourceRoot":""}
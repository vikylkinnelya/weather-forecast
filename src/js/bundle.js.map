{"version":3,"file":"bundle.js","mappings":"mBAAA,MCiBA,EAjBqB,CAACA,EAAMC,KAExB,MAAMC,EAAKC,SAASC,cAAc,OAC5BC,EAAIF,SAASC,cAAc,QACjCF,EAAGI,UAAUC,IAAI,GAAGP,UAAaC,KAEjC,MAAMO,EAAgBL,SAASM,cAAc,oBAAoBR,KACjEI,EAAEK,UAAY,KACd,MAAMC,EAAQR,SAASC,cAAc,QAMrC,OALAO,EAAMD,UAAY,MAClBF,EAAcI,YAAYV,GAC1BM,EAAcI,YAAYP,GACjB,QAATL,GAAkBQ,EAAcI,YAAYD,GAErCR,SAASM,cAAc,IAAIT,UAAaC,MCqBnD,EA/BwBC,IAEpB,MAAM,GAAEW,EAAE,KAAEC,GAASZ,EAErB,IAAID,ECRe,CAACY,IAEpB,MAAME,EAAM,IAAIC,KAAU,IAALH,GAAWI,UAC1BC,GAAQ,IAAIF,MAAOC,UAEzB,OAAIF,GAAOG,EACA,EAEFH,GAAOG,EAAQ,EACb,EAEFH,GAAOG,EAAQ,EACb,EAEFH,GAAOG,EAAQ,EACb,EAEFH,GAAOG,EAAQ,EACb,EAGA,GDbE,CAAeL,GAExBM,EAAI,IAAIH,KAAU,IAALH,GAAWO,WAC5BD,EAAI,KAAKA,EAAI,IAAMA,GAEnB,MAAME,EAAgBlB,SAASC,cAAc,OACvCkB,EAAUnB,SAASC,cAAc,OACjCmB,EAAWpB,SAASC,cAAc,OAElCoB,EAAOC,KAAKC,MAAMZ,EAAW,KAAI,IAAK,IEjBrB,EAACD,EAAIZ,KAC5B,MAAM0B,EAAcxB,SAASM,cAAc,aAAaR,KAElD2B,EAAO,IAAIZ,KAAU,IAALH,GAChBgB,EAAKD,EAAKE,cACVC,EAAKH,EAAKI,WAAa,EAEvBC,EAAW,CADNL,EAAKX,UACMc,EAAIF,GAAIK,KAAK,KAE7BC,EAAiBhC,SAASC,cAAc,OAC9C+B,EAAe7B,UAAUC,IAAI,qBAAqBN,IAAU,qBAC5DkC,EAAeC,UAAY,OAAOH,SAElC9B,SAASM,cAAc,sBAAsBR,MAAa0B,EAAYf,YAAYuB,IFMlF,CAAmBtB,EAAIZ,GGjBL,EAACuB,EAAMvB,KAEzB,MAAM0B,EAAcxB,SAASM,cAAc,aAAaR,KAClDO,EAAgBL,SAASC,cAAc,OAC7CI,EAAcF,UAAUC,IAAI,mBAAmBN,IAAU,mBACzDE,SAASM,cAAc,oBAAoBR,MAAa0B,EAAYf,YAAYJ,GAEhF,MAAM6B,EAAMlC,SAASM,cAAc,aAAaR,MAAa,EAAa,MAAOA,GAC3EqC,EAAMnC,SAASM,cAAc,aAAaR,MAAa,EAAa,MAAOA,GAEjFoC,EAAI3B,UAAYe,KAAKY,IAAIA,EAAI3B,UAAWc,GACxCc,EAAI5B,UAAYe,KAAKa,IAAIA,EAAI5B,UAAWc,IHOxC,CAAcA,EAAMvB,GAEpB,MAAM0B,EAAcxB,SAASM,cAAc,aAAaR,KACxDoB,EAAcf,UAAUC,IAAI,kBAAmB,QAAQN,MAAWkB,KAClEQ,EAAYf,YAAYS,GAExBC,EAAQhB,UAAUC,IAAI,YACtBe,EAAQZ,UAAYS,EAAI,MACxBE,EAAcT,YAAYU,GAE1BC,EAASjB,UAAUC,IAAI,aACvBgB,EAASb,UAAYc,EAAO,KAC5BH,EAAcT,YAAYW,IIxB9BgB,OAAOC,iBAAiB,oBAAoB,KAExC,MAAMC,EAAOtC,SAASuC,eAAe,QAC/BC,EAAQxC,SAASuC,eAAe,cAEtCD,EAAKD,iBAAiB,UAAUI,IAC5BA,EAAEC,iBCdS,MACf,MAAMC,EAAO3C,SAASM,cAAc,iBAC5B,MAARqC,GAAgBA,EAAKC,WAAWC,YAAYF,IDaxC,GEfW,MACf,MAAMG,EAAe9C,SAASM,cAAc,kBAEtCqC,EAAO3C,SAASC,cAAc,OAEpC0C,EAAKxC,UAAUC,IAAI,gBACnB0C,EAAarC,YAAYkC,GAEzB,IAAK,IAAII,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzB,IAAInC,EAAMZ,SAASC,cAAc,OACjCW,EAAIT,UAAUC,IAAI,YAAY2C,IAAK,gBACnCJ,EAAKlC,YAAYG,KFKjB,GGdYoC,OAAOC,IACvB,MAAMC,EAAW,sDAAsDD,2CACjEE,QAAYC,MAAM,GAAGF,KAC3B,IAAKC,EAAIE,GACL,MAAM,IAAIC,MAAM,+BAA+BL,eAA4BE,EAAII,UAEnF,MAAMC,QAAaL,EAAIM,OAKvB,OAHiBzD,SAASM,cAAc,cAC/B2B,UAAY,OAAOuB,EAAKE,KAAKC,YAE/BH,GHOH,CAFkBhB,EAAMoB,OAGnBC,MAAKV,GAAOA,EAAIR,KAAKmB,SAAQ,CAAC/D,EAAIgE,IAC/B,EAAehE,OAGlBiE,OAAMC,GAAOC,QAAQC,IAAIF,WAKtC7B,OAAOgC,YN7BHhB,MAAM,cAAe,CACjBiB,QAAS,CACL,eAAgB,mBAChB,OAAU,sBAGbR,MAAKS,GAAYA,EAASb,SAC1BI,MAAKU,IACF,MAAMC,EAAWxE,SAASM,cAAc,qBACxCiE,EAAaT,SAAQ/D,IACjB,MAAM0E,EAASzE,SAASC,cAAc,UACtCwE,EAAOb,MAAQ7D,EAAG4D,KAClBa,EAAS/D,YAAYgE,U","sources":["webpack://weather/./src/js/services/getCities.js","webpack://weather/./src/js/modules/createMinMax.js","webpack://weather/./src/js/modules/setTempByHours.js","webpack://weather/./src/js/modules/setForecastDay.js","webpack://weather/./src/js/modules/setForecastDayDate.js","webpack://weather/./src/js/modules/setMinMaxTemp.js","webpack://weather/./src/js/main.js","webpack://weather/./src/js/modules/removeList.js","webpack://weather/./src/js/modules/createList.js","webpack://weather/./src/js/services/getForecast.js"],"sourcesContent":["const getCities = () => {\r\n    fetch('cities.json', {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        }\r\n    })\r\n        .then(response => response.json())\r\n        .then(jsonResponse => {\r\n            const datalist = document.querySelector('#data-list-cities')\r\n            jsonResponse.forEach(el => {\r\n                const option = document.createElement('option')\r\n                option.value = el.name\r\n                datalist.appendChild(option)\r\n            })\r\n        })\r\n}\r\n\r\nexport default getCities","const createMinMax = (type, dayNum) => {\r\n\r\n    const el = document.createElement('div')\r\n    const c = document.createElement('span')\r\n    el.classList.add(`${type}-temp-${dayNum}`)\r\n\r\n    const minMaxWrapper = document.querySelector(`.min-max-wrapper-${dayNum}`)\r\n    c.innerText = '°C'\r\n    const space = document.createElement('span')\r\n    space.innerText = ('...')\r\n    minMaxWrapper.appendChild(el)\r\n    minMaxWrapper.appendChild(c)\r\n    type === 'min' && minMaxWrapper.appendChild(space)\r\n\r\n    return document.querySelector(`.${type}-temp-${dayNum}`)\r\n}\r\n\r\nexport default createMinMax","import setForecastDayDate from './setForecastDayDate'\r\nimport setMinMaxTemp from './setMinMaxTemp'\r\nimport setForecastDay from './setForecastDay'\r\n\r\nconst setTempByHours = (el) => {\r\n\r\n    const { dt, main } = el\r\n\r\n    let dayNum = setForecastDay(dt)\r\n\r\n    let h = new Date(dt * 1000).getHours()\r\n    h < 10 ? h = '0' + h : h\r\n\r\n    const hoursTempInfo = document.createElement('div')\r\n    const dayTime = document.createElement('div')\r\n    const timeTemp = document.createElement('div')\r\n\r\n    const temp = Math.floor(main['temp'] - 273, 15)\r\n\r\n    setForecastDayDate(dt, dayNum)\r\n    setMinMaxTemp(temp, dayNum)\r\n\r\n    const forecastDay = document.querySelector(`.forecast-${dayNum}`)\r\n    hoursTempInfo.classList.add('hours-temp-info', `hti-d${dayNum}-h${h}`)\r\n    forecastDay.appendChild(hoursTempInfo)\r\n\r\n    dayTime.classList.add('day-time')\r\n    dayTime.innerText = h + \":00\"\r\n    hoursTempInfo.appendChild(dayTime)\r\n\r\n    timeTemp.classList.add('time-temp')\r\n    timeTemp.innerText = temp + \"°C\"\r\n    hoursTempInfo.appendChild(timeTemp)\r\n}\r\n\r\nexport default setTempByHours","const setForecastDay = (dt) => {\r\n\r\n    const day = new Date(dt * 1000).getDate()\r\n    const today = new Date().getDate()\r\n\r\n    if (day == today) {\r\n        return 1\r\n    }\r\n    else if (day == today + 1) {\r\n        return 2\r\n    }\r\n    else if (day == today + 2) {\r\n        return 3\r\n    }\r\n    else if (day == today + 3) {\r\n        return 4\r\n    }\r\n    else if (day == today + 4) {\r\n        return 5\r\n    }\r\n    else {\r\n        return 6\r\n    }\r\n}\r\n\r\nexport default setForecastDay","const setForecastDayDate = (dt, dayNum) => {\r\n    const forecastDay = document.querySelector(`.forecast-${dayNum}`)\r\n\r\n    const date = new Date(dt * 1000)\r\n    const dY = date.getFullYear()\r\n    const dM = date.getMonth() + 1\r\n    const dD = date.getDate()\r\n    const fullDate = [dD, dM, dY].join('.')\r\n\r\n    const forecasDayDate = document.createElement('div')\r\n    forecasDayDate.classList.add(`forecast-day-date-${dayNum}`, 'forecast-day-date')\r\n    forecasDayDate.innerHTML = `<h3>${fullDate}</h3>`\r\n\r\n    document.querySelector(`.forecast-day-date-${dayNum}`) || forecastDay.appendChild(forecasDayDate)\r\n}\r\n\r\nexport default setForecastDayDate","import createMinMax from \"./createMinMax\"\r\n\r\nconst setMinMaxTemp = (temp, dayNum) => {\r\n\r\n    const forecastDay = document.querySelector(`.forecast-${dayNum}`)\r\n    const minMaxWrapper = document.createElement('div')\r\n    minMaxWrapper.classList.add(`min-max-wrapper-${dayNum}`, 'min-max-wrapper')\r\n    document.querySelector(`.min-max-wrapper-${dayNum}`) || forecastDay.appendChild(minMaxWrapper)\r\n\r\n    const min = document.querySelector(`.min-temp-${dayNum}`) || createMinMax('min', dayNum)\r\n    const max = document.querySelector(`.max-temp-${dayNum}`) || createMinMax('max', dayNum)\r\n\r\n    min.innerText = Math.min(min.innerText, temp)\r\n    max.innerText = Math.max(max.innerText, temp)\r\n}\r\n\r\nexport default setMinMaxTemp","'use strict';\r\nimport getCities from './services/getCities'\r\nimport getForecast from './services/getForecast';\r\nimport createList from './modules/createList';\r\nimport removeList from './modules/removeList';\r\nimport setTempByHours from './modules/setTempByHours';\r\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n\r\n    const form = document.getElementById('form')\r\n    const input = document.getElementById('city-input')\r\n\r\n    form.addEventListener(\"submit\", e => {\r\n        e.preventDefault();\r\n        removeList()\r\n        createList()\r\n\r\n        const inputCity = input.value;\r\n\r\n        getForecast(inputCity)\r\n            .then(res => res.list.forEach((el, idx) =>\r\n                setTempByHours(el, idx)\r\n            )\r\n            )\r\n            .catch(err => console.log(err))\r\n    });\r\n\r\n})\r\n\r\nwindow.onload = getCities()","const removeList = () => {\r\n    const list = document.querySelector('.list-wrapper')\r\n    list != null && list.parentNode.removeChild(list)\r\n}\r\n\r\nexport default removeList","const createList = () => {\r\n    const forecastList = document.querySelector('.forecast-list')\r\n\r\n    const list = document.createElement('div')\r\n\r\n    list.classList.add('list-wrapper')\r\n    forecastList.appendChild(list)\r\n\r\n    for (let i = 1; i <= 6; i++) {\r\n        let day = document.createElement('div')\r\n        day.classList.add(`forecast-${i}`, 'forecast-day')\r\n        list.appendChild(day)\r\n    }\r\n}\r\n\r\nexport default createList","const API_key = '03d6788b090850555c7924df3b5462b4'\r\n\r\nconst getForecast = async (city_name) => {\r\n    const API_base = `https://api.openweathermap.org/data/2.5/forecast?q=${city_name}&appid=${API_key}`\r\n    const res = await fetch(`${API_base}`) //передаем адрес ресурса, кот хотим получить \r\n    if (!res.ok) {\r\n        throw new Error(`Could not find forecast for ${city_name}` + `, reseived ${res.status}`)\r\n    }\r\n    const resp = await res.json()\r\n\r\n    const cityName = document.querySelector('.city-name')\r\n    cityName.innerHTML = ` at ${resp.city.name}&nbsp`\r\n\r\n    return resp\r\n}\r\n\r\nexport default getForecast"],"names":["type","dayNum","el","document","createElement","c","classList","add","minMaxWrapper","querySelector","innerText","space","appendChild","dt","main","day","Date","getDate","today","h","getHours","hoursTempInfo","dayTime","timeTemp","temp","Math","floor","forecastDay","date","dY","getFullYear","dM","getMonth","fullDate","join","forecasDayDate","innerHTML","min","max","window","addEventListener","form","getElementById","input","e","preventDefault","list","parentNode","removeChild","forecastList","i","async","city_name","API_base","res","fetch","ok","Error","status","resp","json","city","name","value","then","forEach","idx","catch","err","console","log","onload","headers","response","jsonResponse","datalist","option"],"sourceRoot":""}